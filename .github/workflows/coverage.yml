name: Reusable workflow for JASP code coverage

on:
  workflow_call:
    inputs:
      needs_JAGS:
        description: 'Should JAGS be available?'
        required: false
        type: boolean
        default: false
      continue_on_schedule:
        description: 'Should the workflow also be run on a schedule? By default (false), this only happens when the github.repository_owner is jasp-stats.'
        type: boolean
        default: false
    secrets:
      CODECOV_TOKEN:
        description: 'Token for Codecov upload'
        required: true

jobs:
  scheduled-run-check:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}

    steps:
      - id: check
        run: echo "status=success" >> $GITHUB_OUTPUT
        if: inputs.continue_on_schedule == true || github.event_name != 'schedule' || github.repository_owner != 'jasp-stats'

  coverage:
    needs: scheduled-run-check
    if: needs.scheduled-run-check.outputs.status == 'success'

    runs-on: ubuntu-latest

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      R_REMOTES_UPGRADE: never
      VDIFFR_RUN_TESTS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      _R_CHECK_LENGTH_1_CONDITION_: TRUE # deprecated from R 4.2.0
      _R_CHECK_MATRIX_DATA_: TRUE        # only works from R 4.2.0 onwards

    steps:
      - uses: actions/checkout@v5

      - uses: r-lib/actions/setup-r@v2

        # copied from https://github.com/r-lib/actions/blob/6b49fefb2846ed3e5e6e58366e7f7dfe01377f02/setup-r-dependencies/action.yaml#L67
      - name: Set site library path
        run: |
          # Set site library path
          cat("::group::Set site library path\n")
          libpak <- Sys.getenv("R_LIB_FOR_PAK")
          if (libpak != "") {
            message("R_LIB_FOR_PAK is already set to ", libpak)
          }
          if (Sys.getenv("RENV_PROJECT") != "") {
            message("renv project detected, no need to set R_LIBS_SITE")
            if (libpak == "") {
              cat(sprintf("R_LIB_FOR_PAK=%s\n", .libPaths()[1]), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
              message("Setting R_LIB_FOR_PAK to ", .libPaths()[1])
            }
            q("no")
          }
          lib <- Sys.getenv("R_LIBS_SITE")
          if (lib == "") {
            lib <- file.path(dirname(.Library), "site-library")
            cat(sprintf("R_LIBS_SITE=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
            message("Setting R_LIBS_SITE to ", lib)
            if (libpak == "") {
              cat(sprintf("R_LIB_FOR_PAK=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
              message("Setting R_LIB_FOR_PAK to ", lib)
            }
          } else {
            message("R_LIBS_SITE is already set to ", lib)
            if (libpak == "") {
              plib <- strsplit(lib, .Platform$path.sep)[[1]][[1]]
              cat(sprintf("R_LIB_FOR_PAK=%s\n", plib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
              message("Setting R_LIB_FOR_PAK to ", plib)
            }
          }
          if (nchar("${{ env.R_LIBS_USER && 'ok' || '' }}") == 0) {
            message("R_LIBS_USER GH env var is unset, setting now: ", Sys.getenv("R_LIBS_USER"))
            cat(sprintf("R_LIBS_USER=%s\n", Sys.getenv("R_LIBS_USER")), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          } else {
            message("R_LIBS_USER GH env var is already set: ", Sys.getenv("R_LIBS_USER"))
          }
          dir.create(Sys.getenv("R_LIBS_SITE"), recursive = TRUE, showWarnings = FALSE)
          dir.create(Sys.getenv("R_LIBS_USER"), recursive = TRUE, showWarnings = FALSE)
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Install pak (Unix)
        run: |
          # Install pak
          echo "::group::Install pak"
          if which sudo >/dev/null; then SUDO="sudo -E --preserve-env=PATH env"; else SUDO=""; fi
          $SUDO R -q -e 'dir.create(Sys.getenv("R_LIB_FOR_PAK"), recursive = TRUE, showWarnings = FALSE)'
          $SUDO R -q -e 'if (FALSE) { install.packages("pak", lib = Sys.getenv("R_LIB_FOR_PAK")) } else { install.packages("pak", lib = Sys.getenv("R_LIB_FOR_PAK"), repos = sprintf("https://r-lib.github.io/p/pak/%s/%s/%s/%s", "stable", .Platform$pkgType, R.Version()$os, R.Version()$arch)) }'
          echo "::endgroup::"
        shell: bash

      # adjusted from https://github.com/r-lib/actions/blob/6b49fefb2846ed3e5e6e58366e7f7dfe01377f02/setup-renv/action.yaml#L25-L28
      - name: Set RENV_PATHS_ROOT
        shell: bash
        run: |
          echo "RENV_PATHS_ROOT=${{ runner.temp }}/renv" >> $GITHUB_ENV

      - name: Install system dependencies on linux
        if: runner.os == 'Linux' && matrix.packages == 'lockfile'
        run: |
          install.packages("renv")
          lib <- Sys.getenv("R_LIB_FOR_PAK")
          lf <- renv::lockfile_read("renv.lock")
          # TODO: this should actually use the version from the lockfile as well...
          # not sure how to do that efficiently though, we could redirect everything to
          # cran/pkg@version? that would make a ton of github api calls though
          pkgs <- vapply(lf$Packages,
               FUN = function(x) {
                 if (x$Source == "GitHub") {
                   paste0(x$RemoteUsername, "/", x$RemoteRepo)
                 } else {
                   x$Package
                 }
               },
               FUN.VALUE = character(1L)
          )
          # add jaspTools manually if missing (it requires libarchive)
          pkgs <- union(pkgs, "jasp-stats/jaspTools")
          .libPaths(lib) # make sure pak is found
          res <- pak::pkg_sysreqs(pkgs, sysreqs_platform = "ubuntu")
          cmd <- paste("sudo", res$install_scripts)
          cat(sprintf("Running cmd:\n%s\n", cmd))
          system(paste("sudo", res$install_scripts))
        shell: Rscript {0}

      - uses: r-lib/actions/setup-renv@v2
        with:
          cache-version: 4

      - name: Install jaspTools if missing from lockfile
        run: |
          if (!require("jaspTools")) renv::install("jasp-stats/jaspTools")
        shell: Rscript {0}

      - name: Setup jaspTools
        run: |
          jaspTools::setupJaspTools()
        shell: Rscript {0}

      - name: Install JAGS on Linux
        if: inputs.needs_JAGS
        run: sudo apt install jags
        shell: bash

      - name: Install covr if missing from lockfile
        run: |
          if (!require("covr")) renv::install("covr")
        shell: Rscript {0}

      - name: Test coverage
        run: |
          cov <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package")
          )
          print(cov)
          covr::to_cobertura(cov)
        shell: Rscript {0}

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: ${{ github.event_name != 'pull_request' }}
          files: ./cobertura.xml
          plugins: noop
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          find '${{ runner.temp }}/package' -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package
